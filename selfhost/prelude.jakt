
struct JaktPrelude {

    function to_bytes() throws -> [u8] {
        let string = JaktPrelude::to_string()
        mut pos: usize = 0
        mut bytes_: [u8] = []
        bytes_.ensure_capacity(string.length())
        while pos < string.length() {
            bytes_.push(string.byte_at(pos)) 
            ++pos
        }

        return bytes_
    }

    function to_string() -> String {
        mut output = ""
        output += "extern struct Optional<T> {\n"
        output += "    function has_value(this) -> bool\n"
        output += "    function value(this) -> T\n"
        output += "    function value_or(this, anon x: T) -> T\n"
        output += "    function Optional<S>(anon x: S) -> Optional<S>\n"
        output += "}\n"
        output += "\n"
        output += "extern struct ArrayIterator<T> {\n"
        output += "    function next(mut this) -> T?\n"
        output += "}\n"
        output += "\n"
        output += "extern struct Array<T> {\n"
        output += "    function is_empty(this) -> bool\n"
        output += "    function contains(this, anon value: T) -> bool\n"
        output += "    function size(this) -> usize\n"
        output += "    function capacity(this) -> usize\n"
        output += "    function ensure_capacity(this, anon capacity: usize) throws\n"
        output += "    function add_capacity(this, anon capacity: usize) throws\n"
        output += "    function resize(mut this, anon size: usize) throws\n"
        output += "    function push(mut this, anon value: T) throws\n"
        output += "    function pop(mut this) -> T?\n"
        output += "    function iterator(this) -> ArrayIterator<T>\n"
        output += "}\n"
        output += "\n"
        output += "extern struct String {\n"
        output += "    function number(anon number: i64) throws -> String\n"
        output += "    function split(this, anon c: c_char) throws -> [String]\n"
        output += "    function c_string(this) -> raw c_char\n"
        output += "    function to_int(this) -> i32?\n"
        output += "    function to_uint(this) -> u32?\n"
        output += "    function is_whitespace(this) -> bool\n"
        output += "    function hash(this) -> u32\n"
        output += "    function substring(this, start: usize, length: usize) throws -> String\n"
        output += "    function repeated(character: c_char, count: usize) throws -> String\n"
        output += "    function is_empty(this) -> bool\n"
        output += "    function length(this) -> usize\n"
        output += "    function byte_at(this, anon index: usize) -> u8\n"
        output += "}\n"
        output += "\n"
        output += "extern struct StringBuilder {\n"
        output += "    function append(mut this, anon b: u8) throws\n"
        output += "    function append_string(mut this, anon s: String) throws\n"
        output += "    function append_c_string(mut this, anon s: raw c_char) throws\n"
        output += "    function append_code_point(mut this, anon code_point: u32) throws\n"
        output += "    function append_escaped_for_json(mut this, anon s: String) throws\n"
        output += "    function to_string(this) throws -> String\n"
        output += "    function is_empty(this) -> bool\n"
        output += "    function length(this) -> usize\n"
        output += "    function clear(mut this)\n"
        output += "    function create() throws -> StringBuilder\n"
        output += "}\n"
        output += "\n"
        output += "extern struct WeakPtr<T> {\n"
        output += "    function has_value(this) -> bool\n"
        output += "    function clear(mut this)\n"
        output += "}\n"
        output += "\n"
        output += "extern struct Tuple {}\n"
        output += "\n"
        output += "extern struct DictionaryIterator<K, V> {\n"
        output += "    function next(mut this) -> (K, V)?\n"
        output += "}\n"
        output += "\n"
        output += "extern struct Dictionary<K, V> {\n"
        output += "    function is_empty(this) -> bool\n"
        output += "    function get(this, anon key: K) -> V?\n"
        output += "    function contains(this, anon key: K) -> bool\n"
        output += "    function set(mut this, key: K, value: V) throws\n"
        output += "    function remove(mut this, anon key: K) -> bool\n"
        output += "    function ensure_capacity(mut this, anon capacity: usize) throws\n"
        output += "    function clear(mut this)\n"
        output += "    function size(this) -> usize\n"
        output += "    function capacity(this) -> usize\n"
        output += "    function keys(this) throws -> [K]\n"
        output += "    function hash(this) -> u32\n"
        output += "    function Dictionary<A, B>() -> Dictionary<A, B>\n"
        output += "    function iterator(this) -> DictionaryIterator<K, V>\n"
        output += "}\n"
        output += "\n"
        output += "extern struct SetIterator<T> {\n"
        output += "    function next(mut this) -> T?\n"
        output += "}\n"
        output += "\n"
        output += "extern struct Set<V> {\n"
        output += "    function is_empty(this) -> bool\n"
        output += "    function contains(this, anon value: V) -> bool\n"
        output += "    function add(mut this, anon value: V) throws\n"
        output += "    function remove(mut this, anon value: V) -> bool\n"
        output += "    function ensure_capacity(mut this, anon capacity: usize) throws\n"
        output += "    function clear(mut this)\n"
        output += "    function size(this) -> usize\n"
        output += "    function capacity(this) -> usize\n"
        output += "    function hash(this) -> u32\n"
        output += "    function Set<A>() -> Set<A>\n"
        output += "    function iterator(this) -> SetIterator<V>\n"
        output += "}\n"
        output += "\n"
        output += "extern struct Range<T> {\n"
        output += "    function next(mut this) -> T?\n"
        output += "}\n"
        output += "\n"
        output += "extern struct Error {\n"
        output += "    function code(this) -> i32\n"
        output += "    function from_errno(anon errno: i32) -> Error\n"
        output += "}\n"
        output += "\n"
        output += "extern class File {\n"
        output += "    public function open_for_reading(anon path: String) throws -> File\n"
        output += "    public function open_for_writing(anon path: String) throws -> File\n"
        output += "\n"
        output += "    public function read(mut this, anon buffer: [u8]) throws -> usize\n"
        output += "    public function write(mut this, anon data: [u8]) throws -> usize\n"
        output += "\n"
        output += "    public function read_all(mut this) throws -> [u8]\n"
        output += "}\n"
        output += "\n"
        output += "extern function abort()\n"
        output += "extern function as_saturated<U, T>(anon input: T) -> U\n"
        output += "extern function as_truncated<U, T>(anon input: T) -> U\n"
        output += "\n"
        output += "// FIXME: Remove from prelude once extern C functions are working again\n"
        output += "extern struct FILE {}\n"
        output += "\n"
        output += "extern function fopen(anon str: raw c_char, anon mode: raw c_char) -> raw FILE\n"
        output += "extern function fgetc(anon mut file: raw FILE) -> c_int\n"
        output += "extern function fclose(anon mut file: raw FILE) -> c_int\n"
        output += "extern function feof(anon mut file: raw FILE) -> c_int\n"
        output += "extern function putchar(anon ch: c_int) -> c_int\n"

        return output
    }
}

