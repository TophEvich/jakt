
struct JaktPrelude {

    function to_bytes() -> [u8] {
        let string = JaktPrelude::to_string()
        mut pos = 0
        mut _bytes: [u8] = []
        while pos < string.length() {
            _bytes.push(string.byte_at(pos)) 
            ++pos
        }

        return _bytes
    }

    function to_string() -> String {
        mut output = ""
        output += "extern struct Optional<T> {"
        output += "    function has_value(this) -> bool"
        output += "    function value(this) -> T"
        output += "    function value_or(this, anon x: T) -> T"
        output += "    function Optional<S>(anon x: S) -> Optional<S>"
        output += "}"
        output += ""
        output += "extern struct ArrayIterator<T> {"
        output += "    function next(mut this) -> T?"
        output += "}"
        output += ""
        output += "extern struct Array<T> {"
        output += "    function is_empty(this) -> bool"
        output += "    function contains(this, anon value: T) -> bool"
        output += "    function size(this) -> usize"
        output += "    function capacity(this) -> usize"
        output += "    function ensure_capacity(this, anon capacity: usize) throws"
        output += "    function add_capacity(this, anon capacity: usize) throws"
        output += "    function resize(mut this, anon size: usize) throws"
        output += "    function push(mut this, anon value: T) throws"
        output += "    function pop(mut this) -> T?"
        output += "    function iterator(this) -> ArrayIterator<T>"
        output += "}"
        output += ""
        output += "extern struct String {"
        output += "    function number(anon number: i64) throws -> String"
        output += "    function split(this, anon c: c_char) throws -> [String]"
        output += "    function c_string(this) -> raw c_char"
        output += "    function to_int(this) -> i32?"
        output += "    function to_uint(this) -> u32?"
        output += "    function is_whitespace(this) -> bool"
        output += "    function hash(this) -> u32"
        output += "    function substring(this, start: usize, length: usize) throws -> String"
        output += "    function repeated(character: c_char, count: usize) throws -> String"
        output += "    function is_empty(this) -> bool"
        output += "    function length(this) -> usize"
        output += "    function byte_at(this, anon index: usize) -> u8"
        output += "}"
        output += ""
        output += "extern struct StringBuilder {"
        output += "    function append(mut this, anon b: u8) throws"
        output += "    function append_string(mut this, anon s: String) throws"
        output += "    function append_c_string(mut this, anon s: raw c_char) throws"
        output += "    function append_code_point(mut this, anon code_point: u32) throws"
        output += "    function append_escaped_for_json(mut this, anon s: String) throws"
        output += "    function to_string(this) throws -> String"
        output += "    function is_empty(this) -> bool"
        output += "    function length(this) -> usize"
        output += "    function clear(mut this)"
        output += "    function create() throws -> StringBuilder"
        output += "}"
        output += ""
        output += "extern struct WeakPtr<T> {"
        output += "    function has_value(this) -> bool"
        output += "    function clear(mut this)"
        output += "}"
        output += ""
        output += "extern struct Tuple {}"
        output += ""
        output += "extern struct DictionaryIterator<K, V> {"
        output += "    function next(mut this) -> (K, V)?"
        output += "}"
        output += ""
        output += "extern struct Dictionary<K, V> {"
        output += "    function is_empty(this) -> bool"
        output += "    function get(this, anon key: K) -> V?"
        output += "    function contains(this, anon key: K) -> bool"
        output += "    function set(mut this, key: K, value: V) throws"
        output += "    function remove(mut this, anon key: K) -> bool"
        output += "    function ensure_capacity(mut this, anon capacity: usize) throws"
        output += "    function clear(mut this)"
        output += "    function size(this) -> usize"
        output += "    function capacity(this) -> usize"
        output += "    function keys(this) throws -> [K]"
        output += "    function hash(this) -> u32"
        output += "    function Dictionary<A, B>() -> Dictionary<A, B>"
        output += "    function iterator(this) -> DictionaryIterator<K, V>"
        output += "}"
        output += ""
        output += "extern struct SetIterator<T> {"
        output += "    function next(mut this) -> T?"
        output += "}"
        output += ""
        output += "extern struct Set<V> {"
        output += "    function is_empty(this) -> bool"
        output += "    function contains(this, anon value: V) -> bool"
        output += "    function add(mut this, anon value: V) throws"
        output += "    function remove(mut this, anon value: V) -> bool"
        output += "    function ensure_capacity(mut this, anon capacity: usize) throws"
        output += "    function clear(mut this)"
        output += "    function size(this) -> usize"
        output += "    function capacity(this) -> usize"
        output += "    function hash(this) -> u32"
        output += "    function Set<A>() -> Set<A>"
        output += "    function iterator(this) -> SetIterator<V>"
        output += "}"
        output += ""
        output += "extern struct Range<T> {"
        output += "    function next(mut this) -> T?"
        output += "}"
        output += ""
        output += "extern struct Error {"
        output += "    function code(this) -> i32"
        output += "    function from_errno(anon errno: i32) -> Error"
        output += "}"
        output += ""
        output += "extern class File {"
        output += "    public function open_for_reading(anon path: String) throws -> File"
        output += "    public function open_for_writing(anon path: String) throws -> File"
        output += ""
        output += "    public function read(mut this, anon buffer: [u8]) throws -> usize"
        output += "    public function write(mut this, anon data: [u8]) throws -> usize"
        output += ""
        output += "    public function read_all(mut this) throws -> [u8]"
        output += "}"
        output += ""
        output += "extern function abort()"
        output += "extern function as_saturated<U, T>(anon input: T) -> U"
        output += "extern function as_truncated<U, T>(anon input: T) -> U"
        output += ""
        output += "// FIXME: Remove from prelude once extern C functions are working again"
        output += "extern struct FILE {}"
        output += ""
        output += "extern function fopen(anon str: raw c_char, anon mode: raw c_char) -> raw FILE"
        output += "extern function fgetc(anon mut file: raw FILE) -> c_int"
        output += "extern function fclose(anon mut file: raw FILE) -> c_int"
        output += "extern function feof(anon mut file: raw FILE) -> c_int"
        output += "extern function putchar(anon ch: c_int) -> c_int"
    }

}

